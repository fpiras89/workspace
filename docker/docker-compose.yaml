name: workspace

services:
  keycloak:
    image: keycloak
    container_name: keycloak
    build:
      context: .
      dockerfile: keycloak/Dockerfile
    #command: ["start", "--optimized"]
    command: ["start-dev", "--tracing-enabled=true", "--features=opentelemetry"]
    ports:
      - 9000:9000
      - 8080:8080
      - 8443:8443
    environment:
      KC_DB: mssql
      KC_DB_URL_DATABASE: keycloak
      KC_DB_URL_HOST: mssql
      KC_DB_URL_PORT: 1433
      KC_DB_URL_PROPERTIES: ";trustServerCertificate=false;encrypt=false"
      KC_DB_USERNAME: sa
      KC_DB_PASSWORD: Password123!
      KC_HOSTNAME: localhost
      KC_PROXY: edge
      KC_HTTP_RELATIVE_PATH: /auth
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_TRACING_ENDPOINT: http://otel-collector:4318
      KC_TRACING_PROTOCOL: http/protobuf
      KC_LOG: console,file
      KC_LOG_CONSOLE_FORMAT: ts="%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}" level="%p" logger="%c" service.name="keycloak" msg="%s"%n
      KC_LOG_FILE_FORMAT: ts="%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}" level="%p" logger="%c" service.name="keycloak" msg="%s"%n
    volumes:
      - ./.logs/keycloak:/opt/keycloak/data/log
    depends_on:
      mssql-tools:
        condition: service_completed_successfully
    networks:
      - workspace

  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "Password123!"
      ACCEPT_EULA: "Y"
    healthcheck:
        test: /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Password123! -C -Q "SELECT 1" || exit 1
        interval: 10s
        timeout: 10s
        retries: 5
    volumes:
      - mssql-data:/var/opt/mssql
    networks:
      - workspace

  mssql-tools:
    image: mcr.microsoft.com/mssql-tools
    container_name: mssql-tools
    environment:
      DB_USERNAME: sa
      DB_PASSWORD: Password123!
    command: >
      sh -c "echo 'Creating database' &&
        until /opt/mssql-tools/bin/sqlcmd -S mssql -U sa -P Password123! -C -Q 'CREATE DATABASE keycloak'; do sleep 1; done &&
        echo 'Database created' &&
        exit 0"
    tty: true
    depends_on:
      mssql:
        condition: service_healthy
    networks:
      - workspace

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.113.0
    container_name: otel-collector
    volumes:
      - ./config/otel-config.yaml:/etc/otel/config.yaml
      - ./.data/otel/log:/log/otel
    command: --config /etc/otel/config.yaml
    environment:
      TEMPO_ENDPOINT: "tempo:4317"
      LOKI_ENDPOINT: "http://loki:3100/otlp"
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    depends_on:
      - prometheus
      - tempo
      - loki
      - fluent-bit
    networks:
      - workspace

  tempo:
    image: grafana/tempo:2.6.0
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - ./.data/tempo:/var/tempo
    ports:
      - "14268" # jaeger ingest
      - "3200"  # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"  # zipkin
    depends_on:
      - tempo-init
    networks:
      - workspace

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  tempo-init:
    image: grafana/tempo:2.6.0
    container_name: tempo-init
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./.data/tempo:/var/tempo

  prometheus:
    image: prom/prometheus:v2.53.3
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - workspace

  loki:
    image: grafana/loki:3.2.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yaml:/etc/loki/loki.yaml
    networks:
      - workspace

  grafana:
    image: grafana/grafana:11.3.0
    container_name: grafana
    volumes:
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafana-storage:/var/lib/grafana
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor
    ports:
      - "3000:3000"
    networks:
      - workspace

  fluent-bit:
    image: fluent/fluent-bit
    container_name: fluent-bit
    volumes:
      - ./config/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./config/fluent-bit-parsers.conf:/fluent-bit/etc/parsers.conf
      - ./.logs:/var/log/containers
    networks:
      - workspace

volumes:
  mssql-data:
  grafana-storage:

networks:
  workspace:
    external: true